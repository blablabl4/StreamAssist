name: CI/CD Pipeline IPTV WhatsApp Bot

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Use Node.js 16
        uses: actions/setup-node@v4
        with:
          node-version: 16
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npx eslint . --ext .js
      - name: Validate configs (AJV)
        run: node -e "require('./utils/configLoader').loadConfig('messages.json'); require('./utils/configLoader').loadConfig('plans.json');"
      - name: Run flow tests
        run: node scripts/testFlows.js
      - name: Archive logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: logs/app.log

  docker-build-and-push:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/iptv-bot:latest,${{ secrets.DOCKERHUB_USERNAME }}/iptv-bot:${{ github.sha }}
      - name: Save Docker image as artifact
        run: docker save ${{ secrets.DOCKERHUB_USERNAME }}/iptv-bot:latest | gzip > iptv-bot-latest.tar.gz
      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: iptv-bot-latest.tar.gz

  deploy:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Deploy to production (manual/auto)
        run: |
          echo "Deploy automático: configure aqui integração com VPS, Swarm, Compose ou use o artefato Docker."
      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
