const Database = require('../database/database');
const IPTVUtils = require('../utils/iptvUtils');
const { gerarCobrancaPix } = require('../controllers/paymentController');
const { createTestIfEligible, createOfficialWhenPaidBurst, createOfficialDirect } = require('../utils/accountGates');
const { burstCheckPaid } = require('../utils/paghiperClient');
const State = require('../utils/stateStore');
const Idem = require('../utils/idempotencyStore');
const Msg = require('../utils/messages');
const PaymentAudit = require('../utils/paymentAudit');
const CredentialsManager = require('../utils/credentialsManager');
const delay = (ms) => new Promise(res => setTimeout(res, ms));

const path = require('path');
const fs = require('fs');
const { logger } = require('../utils/configLoader');

// Importa√ß√£o din√¢mica dos m√≥dulos de fluxo
const flowsDir = path.join(__dirname, '../flows');
const flows = {};
fs.readdirSync(flowsDir).forEach(file => {
  if (file.endsWith('.js')) {
    const cmd = file.replace('Flow.js', '').toLowerCase();
    flows[cmd] = require(path.join(flowsDir, file));
  }
});

class MessageHandler {
  constructor(client) {
    this.client = client;
    this.db = new Database();
    this.iptvUtils = new IPTVUtils();
    this.userStates = new Map(); // Para controlar o estado da conversa
    this.audit = new PaymentAudit(); // Sistema de auditoria
    this.credentials = new CredentialsManager(); // Gerenciador de credenciais
  }

  async handleMessage(message) {
    const telefone = message.from.replace('@c.us', '');
    const texto = message.body.toLowerCase().trim();
    
    // Ignorar mensagens de grupos e status
    if (message.from.includes('@g.us') || message.from.includes('status@broadcast')) {
      return;
    }

    console.log(`Mensagem recebida de ${telefone}: ${message.body}`);

    try {
      // Buscar ou criar cliente
      let cliente = await this.db.buscarCliente(telefone);
      if (!cliente) {
        await this.db.criarCliente(telefone);
        cliente = await this.db.buscarCliente(telefone);
      }

      // Processar comandos
      await this.processarComando(message, cliente, texto);

    } catch (error) {
      logger.error({ event: 'erro_processarComando', telefone, error: error.message, stack: error.stack });
      await this.enviarMensagem(telefone, '‚ùå Ocorreu um erro. Tente novamente em alguns instantes.');
    }
  }

  async processarComando(message, cliente, texto) {
    logger.info({ event: 'processarComando', telefone: cliente.telefone, texto });
    const telefone = cliente.telefone;
    const userState = this.userStates.get(telefone) || { step: 'menu' };
    const context = {
      sendMessage: this.enviarMensagem.bind(this, telefone),
      userState,
      cliente,
      telefone,
      texto,
      // Adicione outras depend√™ncias/contexto conforme necess√°rio
    };

    // Roteamento para flows: exemplo para 'menu' e 'planos'
    if (texto === '0' || texto === 'menu') {
      if (flows['mainmenu']) {
        logger.info({ event: 'route_flow', flow: 'mainMenu', telefone });
        await flows['mainmenu'](context);
        this.userStates.set(telefone, { step: 'menu' });
        return;
      }
    }
    if (texto === '1' || texto === 'planos') {
      if (flows['plans']) {
        logger.info({ event: 'route_flow', flow: 'plans', telefone });
        await flows['plans'](context);
        this.userStates.set(telefone, { step: 'escolher_plano' });
        return;
      }
    }
    if (texto === '2' || texto === 'status') {
      if (flows['status']) {
        logger.info({ event: 'route_flow', flow: 'status', telefone });
        context.db = this.db;
        await flows['status'](context);
        return;
      }
    }
    // Roteamento din√¢mico para outros flows
    const comandosMapeados = {
      '4': 'renew', 'renovar': 'renew',
      '5': 'tutorial', 'tutoriais': 'tutorial',
      '6': 'trial', 'teste': 'trial'
    };
    const chaveFlow = comandosMapeados[texto?.toLowerCase()] || comandosMapeados[texto?.normalize?.('NFD').replace(/[^\w\s]/gi, '').toLowerCase()];
    if (chaveFlow && flows[chaveFlow]) {
      logger.info({ event: 'route_flow', flow: chaveFlow, telefone });
      await flows[chaveFlow](context);
      return;
    }
    logger.info({ event: 'fallback_legacy_flow', telefone, texto });
    // Fallback para fluxo antigo se n√£o houver flow correspondente

    // TRATAMENTO GLOBAL PARA VOLTAR AO MENU
    if (texto === '0' || textoNormalizado === 'menu') {
      await this.mostrarMenu(telefone);
      this.userStates.set(telefone, { step: 'menu' });
      return;
    }

    // Gera√ß√£o autom√°tica de PIX ao escolher plano por n√∫mero
    const planosMap = {
      '2': 'mensal',
      '3': 'trimestral', 
      '4': 'semestral',
      '5': 'anual'
    };
    
    // Aceitar comandos textuais equivalentes para planos
    const textoNormalizado = texto.normalize('NFD').replace(/[^\w\s]/gi, '').toLowerCase();
    const planosTextuais = {
      'mensal': '2',
      'trimestral': '3',
      'semestral': '4',
      'anual': '5'
    };
    const planoNum = planosMap[texto] || planosTextuais[textoNormalizado];
    if (planoNum) {
      const planoTipo = planosMap[texto];
      try {
        await this.enviarMensagem(telefone, 'Gerando cobran√ßa PIX...');
        const cob = await gerarCobrancaPix(cliente, planoTipo);
        if (cob && cob.success) {
          // Persistir transactionId no estado
          State.setState(telefone, { transactionId: cob.txid, plano: planoTipo, pacote: 2 });
          // Mapear txid -> telefone para idempot√™ncia e rastreabilidade
          if (cob.txid) {
            Idem.set(cob.txid, { telefone, plano: planoTipo, pacote: 2, status: 'pending' });
            // Log de auditoria: PIX gerado
            this.audit.pixGenerated(cob.txid, telefone, cob.valor, planoTipo);
          }

          const venc = cob.vencimento ? new Date(cob.vencimento).toLocaleString('pt-BR') : '';
          const detalhes = `üí≥ PIX gerado para o plano *${planoTipo.toUpperCase()}*\n`
            + `Valor: R$ ${cob.valor?.toFixed ? cob.valor.toFixed(2) : cob.valor}\n`
            + (venc ? `Vencimento: ${venc}\n` : '')
            + `\nüìã Copia e Cola:\n${cob.qrCodeText || 'N/A'}\n`
            + (cob.qrCode ? `\nüñºÔ∏è QR Code (link):\n${cob.qrCode}` : '');

          await this.enviarMensagem(telefone, detalhes);
          await this.enviarMensagem(telefone, Msg.askPaymentConfirmation());
        } else {
          await this.enviarMensagem(telefone, `N√£o foi poss√≠vel gerar o PIX. ${cob?.error ? '('+cob.error+')' : ''}`);
        }
      } catch (e) {
        console.error('Erro gerar PIX:', e);
        await this.enviarMensagem(telefone, Msg.genericError());
      }
      return;
    }



    // Comando 6: Consultar credenciais existentes
    if (texto === '6') {
      const credentialsMessage = this.credentials.formatCredentialsMessage(telefone);
      await this.enviarMensagem(telefone, credentialsMessage);
      return;
    }

    // Comando 7: Criar TESTE (uma vez a cada 60 dias)
    // Aceitar 'suporte' por texto
    if (texto === '7' || textoNormalizado === 'suporte') {
      await this.enviarMensagem(telefone, Msg.testCreating());
      const resp = await createTestIfEligible({ telefone, pacote: 2, anotacoes: 'Gerado via WhatsApp' });
      if (resp && resp.success) {
        // Salvar credenciais no gerenciador com dados completos
        const credenciaisParaSalvar = {
          usuario: resp.usuario,
          senha: resp.senha,
          links: resp.links || [],
          vencimento: resp.vencimento,
          pacote: resp.pacote || 2,
          userNumber: resp.userNumber,
          linkPrincipal: resp.linkPrincipal
        };
        
        const salvou = this.credentials.saveCredentials(telefone, credenciaisParaSalvar, 'teste');
        console.log(`üìã Salvamento de credenciais teste para ${telefone}: ${salvou ? 'SUCESSO' : 'FALHA'}`);
        
        // Enviar credenciais formatadas
        await this.enviarMensagem(telefone, Msg.credentials(resp));
      } else if (resp && resp.reason === 'cooldown') {
        await this.enviarMensagem(telefone, Msg.testNotAllowed(resp.remainingDays || 60));
      } else {
        await this.enviarMensagem(telefone, Msg.genericError());
      }
      return;
    }

    // Fluxo oficial: associar transaction_id e confirmar pagamento
    // Exemplo de uso: "TXID abc123" salva o transactionId e pergunta confirma√ß√£o
    if (texto.startsWith('txid ')) {
      const parts = message.body.trim().split(/\s+/);
      const txid = parts[1];
      if (!txid) {
        this.audit.invalidTransactionId(telefone, txid);
        await this.enviarMensagem(telefone, 'Envie no formato: TXID <transaction_id>');
        return;
      }
      State.setState(telefone, { transactionId: txid });
      Idem.set(txid, { telefone, status: 'pending' });
      await this.enviarMensagem(telefone, Msg.askPaymentConfirmation());
      return;
    }

    // Verificar se usu√°rio confirmou pagamento
    if (texto === '1') {
      const st = State.getState(telefone) || {};
      if (!st.transactionId) {
        this.audit.invalidTransactionId(telefone, null);
        await this.enviarMensagem(telefone, 'N√£o encontrei seu transaction_id. Envie: TXID <transaction_id>');
        return;
      }
      
      // Verificar se j√° foi processado (idempot√™ncia)
      const existing = Idem.get(st.transactionId);
      if (existing && existing.status === 'processed') {
        this.audit.duplicateAttemptBlocked(st.transactionId, telefone);
        await this.enviarMensagem(telefone, 'Esta transa√ß√£o j√° foi processada anteriormente.');
        return;
      }
      
      await this.enviarMensagem(telefone, 'Verificando pagamento na PagHiper...');
      this.audit.paymentCheckStarted(st.transactionId, telefone, 5);
      
      let check;
      try {
        check = await burstCheckPaid(st.transactionId, 5, 3000);
        this.audit.paymentCheckResult(st.transactionId, telefone, check);
      } catch (error) {
        this.audit.paymentCheckError(st.transactionId, telefone, error);
        await this.enviarMensagem(telefone, 'Erro ao verificar pagamento. Tente novamente em alguns minutos.');
        return;
      }
      if (check && check.paid) {
        // Marcar idempot√™ncia como pago e informar o cliente ANTES de abrir o navegador
        Idem.set(st.transactionId, { ...(Idem.get(st.transactionId) || {}), telefone, status: 'paid' });
        await this.enviarMensagem(telefone, Msg.paymentConfirmedProcessing());
        // Garantir que a mensagem seja entregue/vis√≠vel antes de iniciar o navegador
        await delay(4000);

        // Agora sim, criar a conta oficial
        try {
          const resp = await createOfficialDirect({ telefone, pacote: st.pacote || 2, anotacoes: 'Cliente WhatsApp' });
          if (resp && resp.success) {
            // Marcar como processado para evitar duplica√ß√£o
            Idem.set(st.transactionId, { ...(Idem.get(st.transactionId) || {}), status: 'processed' });
            this.audit.accountCreated(st.transactionId, telefone, resp);
            
            // Salvar credenciais no gerenciador com dados completos
            const credenciaisParaSalvar = {
              usuario: resp.usuario,
              senha: resp.senha,
              links: resp.links || [],
              vencimento: resp.vencimento,
              pacote: resp.pacote || st.pacote || 2,
              userNumber: resp.userNumber,
              linkPrincipal: resp.linkPrincipal
            };
            
            const salvou = this.credentials.saveCredentials(telefone, credenciaisParaSalvar, 'oficial');
            console.log(`üìã Salvamento de credenciais oficial para ${telefone}: ${salvou ? 'SUCESSO' : 'FALHA'}`);
            
            // Enviar credenciais formatadas
            await this.enviarMensagem(telefone, Msg.credentials(resp));
            State.clearState(telefone);
          } else {
            this.audit.accountCreationError(st.transactionId, telefone, new Error('Falha na cria√ß√£o da conta'));
            await this.enviarMensagem(telefone, 'Pagamento confirmado, mas houve um erro ao criar sua conta. Vamos tentar novamente em instantes.');
          }
        } catch (error) {
          this.audit.accountCreationError(st.transactionId, telefone, error);
          await this.enviarMensagem(telefone, 'Pagamento confirmado, mas houve um erro t√©cnico. Nossa equipe foi notificada.');
        }
      } else {
        await this.enviarMensagem(telefone, Msg.paymentNotConfirmed());
      }
      return;
    }

    // Usu√°rio disse que N√ÉO pagou
    if (texto === '2') {
      await this.enviarMensagem(telefone, Msg.paymentNotConfirmedShort());
      return;
    }





    // Comando 0: Menu principal
    // Aceitar 'menu' por texto
    if (texto === '0' || textoNormalizado === 'menu') {
      await this.mostrarMenu(telefone);
      this.userStates.set(telefone, { step: 'menu' });
      return;
    }

    // Comando 1: Planos
    if (texto === '1') {
      await this.mostrarPlanos(telefone);
      // O estado s√≥ muda para 'escolher_plano', cobran√ßa s√≥ ocorre se o usu√°rio escolher um plano depois
      this.userStates.set(telefone, { step: 'escolher_plano' });
      return;
    }

    // Comando 2: Status
    if (texto === '2') {
      await this.mostrarStatus(telefone, cliente.id);
      return;
    }

    // Comando 3: Credenciais
    // Aceitar 'credenciais' por texto
    if (texto === '3' || textoNormalizado === 'credenciais') {
      const credenciais = this.credentials.getCredentials(telefone);
      if (credenciais) {
        await this.enviarMensagem(telefone, this.credentials.formatCredentialsMessage(credenciais));
      } else {
        await this.enviarMensagem(telefone, 'Voc√™ ainda n√£o possui credenciais IPTV. Digite *1* para ver os planos dispon√≠veis.');
      }
      return;
    }

    // Comando 4: Renovar
    // Aceitar 'renovar' por texto
    if (texto === '4' || textoNormalizado === 'renovar') {
      await this.mostrarPlanos(telefone, true);
      this.userStates.set(telefone, { step: 'renovar_plano' });
      return;
    }

    // Comando 5: Tutoriais
    // Aceitar 'tutoriais' por texto
    if (texto === '5' || textoNormalizado === 'tutoriais') {
      await this.mostrarTutoriais(telefone);
      this.userStates.set(telefone, { step: 'escolher_tutorial' });
      return;
    }

    // Comando 6: Teste gr√°tis
    if (texto === '6') {
      await this.mostrarPlanos(telefone);
      this.userStates.set(telefone, { step: 'escolher_plano' });
      return;
    }



    // Processar sele√ß√£o de plano
    if (userState.step === 'escolher_plano' || userState.step === 'renovar_plano') {
      await this.processarSelecaoPlano(telefone, texto, cliente, userState.step === 'renovar_plano');
      return;
    }

    // Processar sele√ß√£o de tutorial
    if (userState.step === 'escolher_tutorial') {
      await this.processarSelecaoTutorial(telefone, texto);
      return;
    }

    // Processar op√ß√£o de instala√ß√£o
    if (userState.step === 'opcao_instalacao') {
      await this.processarOpcaoInstalacao(telefone, texto, userState.tipoTv);
      return;
    }

    // Comando n√£o reconhecido
    await this.enviarMensagem(telefone, 
      '‚ùì Comando n√£o reconhecido.\n\nDigite *0* para ver o menu de op√ß√µes dispon√≠veis.'
    );
  }

  async mostrarMenu(telefone) {
    const menu = `üé¨ *BEM-VINDO AO IPTV BOT* üé¨

Escolha uma op√ß√£o digitando apenas o *N√öMERO*:

1Ô∏è‚É£ *PLANOS* - Ver planos dispon√≠veis
2Ô∏è‚É£ *STATUS* - Verificar sua assinatura
3Ô∏è‚É£ *CREDENCIAIS* - Ver seus logins IPTV
4Ô∏è‚É£ *RENOVAR* - Renovar assinatura
5Ô∏è‚É£ *TUTORIAIS* - Como instalar IPTV
6Ô∏è‚É£ *TESTE GR√ÅTIS* - Conta teste limitada

üìù *COMO USAR:*
Digite apenas o n√∫mero da op√ß√£o (ex: *1*, *2*, *3*)

üí° *Dica:* Digite *0* para voltar ao menu principal.`;

    await this.enviarMensagem(telefone, menu);
  }

  async mostrarPlanos(telefone, isRenovacao = false) {
    const titulo = isRenovacao ? 'üîÑ *RENOVA√á√ÉO DE ASSINATURA*' : 'üì∫ *ZielIPTV - PLANOS DISPON√çVEIS*';
    
    const planos = `${titulo}
üî• *Qualidade m√°xima, sem travamentos. Testado e aprovado!*

Escolha digitando apenas o *N√öMERO*:

1Ô∏è‚É£ *CONTA TESTE* - GR√ÅTIS
‚úÖ Teste gratuito por tempo limitado
‚úÖ Todos os canais + filmes + s√©ries
‚úÖ Qualidade HD/4K
‚úÖ Sem compromisso
‚ö†Ô∏è *Limita√ß√£o:* 1 teste por cliente a cada 60 dias

2Ô∏è‚É£ *PLANO MENSAL* - R$ 35,00
‚úÖ Ideal para testar o servi√ßo
‚úÖ Acesso completo por 30 dias
‚úÖ Todos os canais + filmes + s√©ries
‚úÖ Qualidade HD/4K

3Ô∏è‚É£ *PLANO TRIMESTRAL* - R$ 90,00
üí∏ *ECONOMIZE R$ 15* (sai por R$ 30/m√™s)
‚úÖ Acesso por 3 meses completos
‚úÖ Melhor custo-benef√≠cio
‚úÖ Estabilidade garantida

4Ô∏è‚É£ *PLANO SEMESTRAL* - R$ 170,00
üí∏ *ECONOMIZE R$ 40* (sai por R$ 28,33/m√™s)
‚úÖ Acesso por 6 meses completos
‚úÖ Maior economia
‚úÖ Sem preocupa√ß√µes por meio ano

5Ô∏è‚É£ *PLANO ANUAL* - R$ 300,00
üí∏ *ECONOMIZE R$ 120* (sai por R$ 25/m√™s)
‚úÖ Acesso por 12 meses completos
‚úÖ MAIOR ECONOMIA DO ANO!
‚úÖ Pagou e esqueceu por 1 ano
‚úÖ Suporte priorit√°rio

üîß *Taxa de instala√ß√£o t√©cnica:* R$ 20,00
(Opcional - para quem quer instala√ß√£o profissional)

üí≥ *Pagamento via PIX* - Ativa√ß√£o instant√¢nea!
üìù Digite *0* para voltar ao menu principal`;

    await this.enviarMensagem(telefone, planos);
  }

  async mostrarSuporte(telefone) {
    const suporte = `üÜò *SUPORTE T√âCNICO* üÜò

üìû *Atendimento:*
‚Ä¢ WhatsApp: (11) 99999-9999
‚Ä¢ Telegram: @suporte_iptv
‚Ä¢ Email: suporte@iptv.com

üïê *Hor√°rio de atendimento:*
Segunda a Domingo: 8h √†s 22h

‚ùì *D√∫vidas frequentes:*
‚Ä¢ Como configurar o app
‚Ä¢ Problemas de conex√£o
‚Ä¢ Altera√ß√£o de dados
‚Ä¢ Cancelamento

‚¨ÖÔ∏è Digite *0* para voltar ao menu principal`;

    await this.enviarMensagem(telefone, suporte);
  }

  async mostrarTutoriais(telefone) {
    const tutoriais = `üì∫ *TUTORIAIS DE INSTALA√á√ÉO IPTV* üì∫

Escolha digitando apenas o *N√öMERO*:

1Ô∏è‚É£ *SAMSUNG* - Smart TV Samsung
2Ô∏è‚É£ *ANDROID TV* - TV Box / Smart Android  
3Ô∏è‚É£ *LG* - Smart TV LG
4Ô∏è‚É£ *ROKU* - Roku TV
5Ô∏è‚É£ *PC* - Computador/Notebook
6Ô∏è‚É£ *SS IPTV* - Adicionar playlist
7Ô∏è‚É£ *CELULAR ANDROID* - Smartphone Android
8Ô∏è‚É£ *CELULAR IPHONE* - iPhone/iPad

üìù Digite *0* para voltar ao menu principal`;

    await this.enviarMensagem(telefone, tutoriais);
  }

  async processarSelecaoTutorial(telefone, texto) {
    // Mapeamento de n√∫meros para tutoriais
    const tutoriaisValidos = {
      '1': {
        nome: 'Samsung Smart TV',
        app: 'Lazer Play',
        video: 'https://youtu.be/qlSRNVQgkIU?si=93w7CP7djeyIBd4h',
        tipo: 'samsung'
      },
      '2': {
        nome: 'Android TV / TV Box',
        app: 'Uniplay IPTV',
        video: 'https://www.youtube.com/watch?v=FAoP4uu3vWs',
        tipo: 'android'
      },
      '3': {
        nome: 'LG Smart TV',
        app: 'Smarters Pro',
        video: 'https://www.youtube.com/watch?v=2sMmOCtlhoo',
        tipo: 'lg'
      },
      '4': {
        nome: 'Roku TV',
        app: 'IPTV Player',
        video: 'https://www.youtube.com/watch?v=f_-1YmGawlE',
        tipo: 'roku'
      },
      '5': {
        nome: 'PC/Notebook',
        app: 'Purple Player',
        video: 'https://www.youtube.com/watch?v=qtjlLoBM1cw',
        tipo: 'pc'
      },
      '6': {
        nome: 'SS IPTV',
        app: 'SS IPTV (adicionar playlist)',
        video: 'https://www.youtube.com/watch?v=NSzrIep2ZjM',
        tipo: 'ssiptv'
      },
      '7': {
        nome: 'Celular Android',
        app: 'IPTV Smarters Pro',
        video: 'https://www.youtube.com/watch?v=kYBXTwHhPUc',
        tipo: 'android_mobile'
      },
      '8': {
        nome: 'iPhone/iPad',
        app: 'IPTV Smarters Pro',
        video: 'https://www.youtube.com/watch?v=mF8jJ5rKjgE',
        tipo: 'ios_mobile'
      }
    };

    const tutorialSelecionado = tutoriaisValidos[texto];
    
    if (!tutorialSelecionado) {
      await this.enviarMensagem(telefone, 
        '‚ùå Op√ß√£o inv√°lida. Digite um n√∫mero de *1* a *8* conforme o menu de tutoriais.\n\nDigite *0* para voltar ao menu principal.'
      );
      this.userStates.set(telefone, { step: 'menu' });
      return;
    }

    // Mostrar op√ß√µes de instala√ß√£o
    const opcoes = `üîß *INSTALA√á√ÉO ${tutorialSelecionado.nome.toUpperCase()}* üîß

Escolha digitando apenas o *N√öMERO*:

1Ô∏è‚É£ *FA√áA VOC√ä MESMO* - GRATUITO
‚Ä¢ Tutorial em v√≠deo passo a passo
‚Ä¢ Aplicativo: ${tutorialSelecionado.app}
‚Ä¢ Suporte via chat
‚Ä¢ *GRATUITO*

2Ô∏è‚É£ *INSTALA√á√ÉO T√âCNICA* - R$ 20,00
‚Ä¢ T√©cnico especializado
‚Ä¢ Instala√ß√£o remota via TeamViewer
‚Ä¢ Configura√ß√£o completa
‚Ä¢ Garantia de funcionamento
‚Ä¢ *R$ 20,00*

üìù Digite *0* para voltar ao menu principal`;

    await this.enviarMensagem(telefone, opcoes);
    
    // Salvar estado
    this.userStates.set(telefone, { 
      step: 'opcao_instalacao', 
      tipoTv: tutorialSelecionado.tipo,
      tutorial: tutorialSelecionado 
    });
  }

  async processarOpcaoInstalacao(telefone, texto, tipoTv) {
    const userState = this.userStates.get(telefone);
    const tutorial = userState.tutorial;

    if (texto === '1') {
    // Op√ß√£o 1: Tutorial gratuito
    let mensagemTutorial = `üéØ *TUTORIAL GRATUITO* üéØ

üì∫ *Dispositivo:* ${tutorial.nome}
üì± *Aplicativo:* ${tutorial.app}

üé¨ *V√çDEO TUTORIAL:*
${tutorial.video}`;

    // Tutoriais espec√≠ficos por dispositivo
    if (tipoTv === 'samsung') {
      mensagemTutorial += `

üìã *PASSO A PASSO SAMSUNG:*

üì∫ *1. TV Samsung Antiga (at√© ~2016)*
‚úÖ Pegue o controle da TV
‚úÖ Pressione o bot√£o *Menu*
‚úÖ V√° em *Rede* ‚Üí pressione OK
‚úÖ Escolha *Configura√ß√µes de Rede* ‚Üí pressione OK
‚úÖ Selecione *Tipo de Conex√£o*: Sem fio (Wi-Fi) ou Com fio (cabo) ‚Üí pressione OK
‚úÖ Quando chegar em *Configura√ß√µes IP*, selecione *Manual*

üîß *CONFIGURAR DNS:*
Vai aparecer: IP, Sub-rede, Gateway, DNS
V√° at√© o campo *DNS* ‚Üí digite um desses n√∫meros:

üåê *DNS DISPON√çVEIS (teste um por vez):*
‚Ä¢ 84.17.40.32
‚Ä¢ 149.78.185.94
‚Ä¢ 209.14.68.83
‚Ä¢ 135.148.43.69

üí° *DICA:* Se um DNS n√£o funcionar, teste o pr√≥ximo da lista!

üì∫ *2. TV Samsung Nova (2017+)*
‚úÖ Instale o app ${tutorial.app} na Smart TV
‚úÖ Configure com suas credenciais IPTV
‚úÖ Se n√£o funcionar, mude o DNS conforme acima`;
    } else if (tipoTv === 'android_mobile') {
      mensagemTutorial += `

üìã *PASSO A PASSO CELULAR ANDROID:*

üì± *1. BAIXAR O APLICATIVO*
‚úÖ Abra a *Google Play Store*
‚úÖ Pesquise por "*IPTV Smarters Pro*"
‚úÖ Baixe e instale o aplicativo
‚úÖ Abra o app ap√≥s a instala√ß√£o

üì± *2. CONFIGURAR IPTV*
‚úÖ Selecione "*Add New User*" ou "*Adicionar Usu√°rio*"
‚úÖ Escolha "*Login with Xtream Codes API*"
‚úÖ Preencha os campos:
   ‚Ä¢ *Server URL*: [Seu servidor]
   ‚Ä¢ *Username*: [Seu usu√°rio]
   ‚Ä¢ *Password*: [Sua senha]
‚úÖ Toque em "*Add User*" ou "*Adicionar*"

üì± *3. ASSISTIR*
‚úÖ Aguarde carregar as listas
‚úÖ Escolha "*Live TV*" para canais ao vivo
‚úÖ Escolha "*Movies*" para filmes
‚úÖ Escolha "*Series*" para s√©ries

üí° *DICAS IMPORTANTES:*
‚Ä¢ Use Wi-Fi para melhor qualidade
‚Ä¢ Mantenha o app sempre atualizado
‚Ä¢ Em caso de travamento, feche e abra o app`;
    } else if (tipoTv === 'ios_mobile') {
      mensagemTutorial += `

üìã *PASSO A PASSO iPhone/iPad:*

üì± *1. BAIXAR O APLICATIVO*
‚úÖ Abra a *App Store*
‚úÖ Pesquise por "*IPTV Smarters Pro*"
‚úÖ Baixe e instale o aplicativo
‚úÖ Abra o app ap√≥s a instala√ß√£o

üì± *2. CONFIGURAR IPTV*
‚úÖ Selecione "*Add New User*" ou "*Adicionar Usu√°rio*"
‚úÖ Escolha "*Login with Xtream Codes API*"
‚úÖ Preencha os campos:
   ‚Ä¢ *Server URL*: [Seu servidor]
   ‚Ä¢ *Username*: [Seu usu√°rio]
   ‚Ä¢ *Password*: [Sua senha]
‚úÖ Toque em "*Add User*" ou "*Adicionar*"

üì± *3. ASSISTIR*
‚úÖ Aguarde carregar as listas
‚úÖ Escolha "*Live TV*" para canais ao vivo
‚úÖ Escolha "*Movies*" para filmes
‚úÖ Escolha "*Series*" para s√©ries

üí° *DICAS IMPORTANTES:*
‚Ä¢ Use Wi-Fi para melhor qualidade
‚Ä¢ Permita notifica√ß√µes do app
‚Ä¢ Para tela cheia, gire o dispositivo
‚Ä¢ Em caso de travamento, feche e abra o app

üîí *IMPORTANTE iOS:*
‚Ä¢ Aceite as permiss√µes solicitadas
‚Ä¢ Se n√£o funcionar, v√° em Ajustes > Geral > Gerenciamento de Dispositivo`;
    } else {
      mensagemTutorial += `

üìã *PASSO A PASSO:*
1Ô∏è‚É£ Acesse o v√≠deo acima
2Ô∏è‚É£ Siga as instru√ß√µes do tutorial
3Ô∏è‚É£ Use suas credenciais IPTV
4Ô∏è‚É£ Em caso de d√∫vidas, digite *0* para voltar ao menu`;
    }

    mensagemTutorial += `

‚úÖ *SUAS CREDENCIAIS:*
Digite *6* para ver seus logins

üí° *Dica:* Tenha suas credenciais IPTV em m√£os antes de come√ßar!

üìù Digite *0* para voltar ao menu principal`;

    await this.enviarMensagem(telefone, mensagemTutorial);
      
    } else if (texto === '2') {
    // Op√ß√£o 2: Instala√ß√£o t√©cnica paga
    const mensagemTecnico = `üë®‚Äçüíª *INSTALA√á√ÉO T√âCNICA* üë®‚Äçüíª

üì∫ *Dispositivo:* ${tutorial.nome}
üí∞ *Valor:* R$ 20,00

‚úÖ *O QUE EST√Å INCLU√çDO:*
‚Ä¢ Instala√ß√£o remota via TeamViewer
‚Ä¢ Configura√ß√£o completa do aplicativo
‚Ä¢ Teste de funcionamento
‚Ä¢ Explica√ß√£o de como usar
‚Ä¢ Garantia de 7 dias

‚è∞ *COMO FUNCIONA:*
1Ô∏è‚É£ Voc√™ paga R$ 20,00 via PIX
2Ô∏è‚É£ Agendamos hor√°rio (mesmo dia)
3Ô∏è‚É£ T√©cnico acessa seu dispositivo remotamente
4Ô∏è‚É£ Instala√ß√£o completa em 15-30 minutos

üì± *PARA CONTRATAR:*
Digite *3* para contratar instala√ß√£o t√©cnica

üìù Digite *0* para voltar ao menu principal`;

    await this.enviarMensagem(telefone, mensagemTecnico);
    
  } else if (texto === '3') {
    // Processar contrata√ß√£o do t√©cnico
    await this.processarContratacaoTecnico(telefone, tutorial);
  } else {
    await this.enviarMensagem(telefone, 
      '‚ùå Op√ß√£o inv√°lida. Digite *1* para tutorial gratuito, *2* para instala√ß√£o t√©cnica ou *0* para voltar ao menu.'
    );
    this.userStates.set(telefone, { step: 'menu' });
    return;
  }

  // Resetar estado ap√≥s processamento
  this.userStates.set(telefone, { step: 'menu' });
}

  async processarContratacaoTecnico(telefone, tutorial) {
    const mensagemPagamento = `üí≥ *PAGAMENTO INSTALA√á√ÉO T√âCNICA* üí≥

üì∫ *Servi√ßo:* Instala√ß√£o ${tutorial.nome}
üí∞ *Valor:* R$ 20,00

üì± *Para pagar:*
1. Abra o app do seu banco
2. Escaneie o QR Code abaixo
3. Confirme o pagamento

‚è∞ *Ap√≥s o pagamento:*
‚Ä¢ Entraremos em contato em at√© 2 horas
‚Ä¢ Agendaremos hor√°rio para instala√ß√£o
‚Ä¢ Instala√ß√£o no mesmo dia

üîÑ *Gerando PIX...*`;

    await this.enviarMensagem(telefone, mensagemPagamento);
    
    // Aqui voc√™ pode integrar com a PagHiper para gerar cobran√ßa de R$ 20,00
    // Similar ao processo de planos, mas para servi√ßo t√©cnico
    
    console.log(`Solicita√ß√£o de instala√ß√£o t√©cnica: ${telefone} - ${tutorial.nome}`);
  }

  async mostrarStatus(telefone, clienteId) {
    try {
      // Buscar assinaturas ativas do cliente
      const assinaturas = await this.db.db.all(`
        SELECT * FROM assinaturas 
        WHERE cliente_id = ? AND status = 'ativa'
        ORDER BY data_vencimento DESC
      `, [clienteId]);

      if (assinaturas.length === 0) {
        await this.enviarMensagem(telefone, 
          'üìã *STATUS DA ASSINATURA*\n\n‚ùå Voc√™ n√£o possui assinaturas ativas.\n\nDigite *1* para ver planos dispon√≠veis.'
        );
        return;
      }

      let statusMsg = 'üìã *STATUS DAS SUAS ASSINATURAS*\n\n';

      for (const assinatura of assinaturas) {
        const dataVencimento = new Date(assinatura.data_vencimento);
        const hoje = new Date();
        const diasRestantes = Math.ceil((dataVencimento - hoje) / (1000 * 60 * 60 * 24));

        statusMsg += `üì¶ *Plano:* ${assinatura.plano.toUpperCase()}\n`;
        statusMsg += `üí∞ *Valor:* R$ ${assinatura.valor.toFixed(2)}\n`;
        statusMsg += `üìÖ *Vence em:* ${diasRestantes} dias (${dataVencimento.toLocaleDateString('pt-BR')})\n`;
        statusMsg += `‚úÖ *Status:* ${assinatura.status.toUpperCase()}\n`;
        
        if (assinatura.usuario_iptv) {
          statusMsg += `üë§ *Usu√°rio:* ${assinatura.usuario_iptv}\n`;
          statusMsg += `üîê *Senha:* ${assinatura.senha_iptv}\n`;
        }
        
        statusMsg += '\n---\n\n';
      }

      statusMsg += '‚¨ÖÔ∏è Digite *0* para voltar ao menu principal';
      await this.enviarMensagem(telefone, statusMsg);

    } catch (error) {
      console.error('Erro ao buscar status:', error);
      await this.enviarMensagem(telefone, '‚ùå Erro ao buscar informa√ß√µes. Tente novamente.');
    }
  }

  async processarSelecaoPlano(telefone, texto, cliente, isRenovacao) {
    // Mapeamento de n√∫meros para planos
    const planosValidos = {
      '1': { nome: 'Teste', valor: 0, duracao: 3, economia: 0, tipo: 'teste' },
      '2': { nome: 'Mensal', valor: 35.00, duracao: 30, economia: 0, tipo: 'mensal' },
      '3': { nome: 'Trimestral', valor: 90.00, duracao: 90, economia: 15, tipo: 'trimestral' },
      '4': { nome: 'Semestral', valor: 170.00, duracao: 180, economia: 40, tipo: 'semestral' },
      '5': { nome: 'Anual', valor: 300.00, duracao: 365, economia: 120, tipo: 'anual' }
    };

    const planoSelecionado = planosValidos[texto];
    
    if (!planoSelecionado) {
      await this.enviarMensagem(telefone, 
        '‚ùå Op√ß√£o inv√°lida. Digite um n√∫mero de *1* a *5* conforme o menu de planos.\n\nDigite *0* para voltar ao menu principal.'
      );
      this.userStates.set(telefone, { step: 'menu' });
      return;
    }

    // Processar conta teste (op√ß√£o 1)
    if (planoSelecionado.tipo === 'teste') {
      await this.enviarMensagem(telefone, Msg.testCreating());
      const resp = await createTestIfEligible({ telefone, pacote: 2, anotacoes: 'Gerado via WhatsApp' });
      if (resp && resp.success) {
        this.credentials.saveCredentials(telefone, resp, 'teste');
        await this.enviarMensagem(telefone, Msg.credentials(resp));
      } else if (resp && resp.reason === 'cooldown') {
        await this.enviarMensagem(telefone, Msg.testNotAllowed(resp.remainingDays || 60));
      } else {
        await this.enviarMensagem(telefone, Msg.genericError());
      }
      this.userStates.set(telefone, { step: 'menu' });
      return;
    }

    // Gerar cobran√ßa PIX para planos pagos
    await this.enviarMensagem(telefone, '‚è≥ Gerando cobran√ßa PIX... Aguarde um momento.');

    try {
      const cobranca = await gerarCobrancaPix(cliente, planoSelecionado.tipo);

      if (!cobranca.success) {
        await this.enviarMensagem(telefone, `‚ùå Erro ao gerar cobran√ßa: ${cobranca.error}`);
        return;
      }

      // Criar assinatura pendente
      const dataInicio = new Date();
      const dataVencimento = new Date();
      dataVencimento.setDate(dataVencimento.getDate() + planoSelecionado.duracao);

      const assinaturaId = await this.db.criarAssinatura(
        cliente.id,
        planoSelecionado.tipo,
        planoSelecionado.valor,
        dataInicio.toISOString().split('T')[0],
        dataVencimento.toISOString().split('T')[0]
      );

      // Criar transa√ß√£o
      await this.db.criarTransacao(
        cliente.id,
        assinaturaId,
        cobranca.txid,
        planoSelecionado.valor,
        cobranca.qrCode,
        cobranca.qrCodeText,
        new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString().split('T')[0]
      );

      // Criar mensagem de pagamento persuasiva
      let mensagemEconomia = '';
      if (planoSelecionado.economia > 0) {
        const valorMensal = planoSelecionado.valor / (planoSelecionado.duracao / 30);
        mensagemEconomia = `üí∏ *VOC√ä EST√Å ECONOMIZANDO R$ ${planoSelecionado.economia.toFixed(2)}!*
üìâ Sai por apenas R$ ${valorMensal.toFixed(2)}/m√™s

`;
      }
      
      const mensagemPagamento = `üî• *PARAB√âNS PELA ESCOLHA INTELIGENTE!* üî•

üì¶ *Plano:* ${planoSelecionado.nome} (${planoSelecionado.duracao} dias)
üí∞ *Valor:* R$ ${planoSelecionado.valor.toFixed(2)}
${mensagemEconomia}
‚úÖ *BENEF√çCIOS INCLUSOS:*
‚Ä¢ +50.000 canais HD/4K
‚Ä¢ Filmes e s√©ries ilimitados
‚Ä¢ Canais premium e adultos
‚Ä¢ Sem travamentos
‚Ä¢ Suporte 24h
‚Ä¢ Ativa√ß√£o instant√¢nea

üì± *PAGUE AGORA VIA PIX:*
1Ô∏è‚É£ Abra o app do seu banco
2Ô∏è‚É£ Escaneie o QR Code abaixo
3Ô∏è‚É£ Confirme o pagamento

‚è∞ *ATEN√á√ÉO:* QR Code v√°lido por 24h
üöÄ *Ap√≥s pagamento = Ativa√ß√£o IMEDIATA!*

üìã *PIX COPIA E COLA:*
${cobranca.qrCodeText}`;

      await this.enviarMensagem(telefone, mensagemPagamento);

      // Enviar QR Code como imagem se dispon√≠vel
      if (cobranca.qrCode) {
        try {
          try {
            const media = await this.client.sendMessage(telefone + '@c.us', {
              media: cobranca.qrCode,
              caption: 'üì± QR Code para pagamento PIX'
            });
          } catch (err) {
            await this.enviarMensagem(telefone, '‚ö†Ô∏è N√£o foi poss√≠vel enviar o QR Code como imagem, mas voc√™ pode usar o PIX Copia e Cola acima normalmente.');
          }
        } catch (error) {
          console.error('Erro ao enviar QR Code:', error);
        }
      }

      // Resetar estado do usu√°rio
      this.userStates.set(telefone, { step: 'menu' });

    } catch (error) {
      console.error('Erro ao processar sele√ß√£o de plano:', error);
      await this.enviarMensagem(telefone, '‚ùå Erro interno. Tente novamente em alguns instantes.');
    }
  }

  async enviarMensagem(telefone, texto) {
    try {
      await this.client.sendMessage(telefone + '@c.us', texto);
    } catch (error) {
      console.error('Erro ao enviar mensagem:', error);
    }
  }

  // M√©todo para processar pagamentos aprovados
  async processarPagamentoAprovado(transactionId) {
    try {
      const transacao = await this.db.buscarTransacao(transactionId);
      if (!transacao) {
        console.error('Transa√ß√£o n√£o encontrada:', transactionId);
        return;
      }

      // Atualizar status da transa√ß√£o
      await this.db.atualizarStatusTransacao(transactionId, 'aprovada');

      // Buscar cliente
      const cliente = await this.db.db.get('SELECT * FROM clientes WHERE id = ?', [transacao.cliente_id]);
      
      // Gerar credenciais IPTV
      const credenciais = this.iptvUtils.gerarCredenciais(cliente.telefone);
      
      // Criar usu√°rio no servidor IPTV
      const resultadoIPTV = await this.iptvUtils.criarUsuarioIPTV(credenciais, transacao.plano);
      
      if (resultadoIPTV.success) {
        // Atualizar assinatura com credenciais
        await this.db.atualizarCredenciaisIPTV(
          transacao.assinatura_id,
          credenciais.usuario,
          credenciais.senha,
          credenciais.urlServidor
        );

        // Buscar dados da assinatura
        const assinatura = await this.db.db.get('SELECT * FROM assinaturas WHERE id = ?', [transacao.assinatura_id]);
        
        // Enviar credenciais por WhatsApp
        const mensagemCredenciais = this.iptvUtils.formatarMensagemCredenciais(
          credenciais,
          assinatura.plano,
          assinatura.data_vencimento
        );

        await this.enviarMensagem(cliente.telefone, mensagemCredenciais);
        
        console.log(`Credenciais enviadas para ${cliente.telefone}`);
      } else {
        console.error('Erro ao criar usu√°rio IPTV:', resultadoIPTV.error);
        await this.enviarMensagem(cliente.telefone, 
          '‚ùå Pagamento aprovado, mas houve erro na ativa√ß√£o. Nosso suporte entrar√° em contato.'
        );
      }

    } catch (error) {
      console.error('Erro ao processar pagamento aprovado:', error);
    }
  }

  // M√©todo para verificar vencimentos
  async verificarVencimentos() {
    try {
      const assinaturasVencendo = await this.db.buscarAssinaturasVencendo(3);
      
      for (const assinatura of assinaturasVencendo) {
        const dataVencimento = new Date(assinatura.data_vencimento);
        const hoje = new Date();
        const diasRestantes = Math.ceil((dataVencimento - hoje) / (1000 * 60 * 60 * 24));

        const mensagem = this.iptvUtils.formatarMensagemVencimento(
          assinatura.nome,
          assinatura.data_vencimento,
          diasRestantes
        );

        await this.enviarMensagem(assinatura.telefone, mensagem);
        console.log(`Aviso de vencimento enviado para ${assinatura.telefone}`);
      }

    } catch (error) {
      console.error('Erro ao verificar vencimentos:', error);
    }
  }
}

module.exports = MessageHandler;
